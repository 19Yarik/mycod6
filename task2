# Визначення класу для вузлів дерева
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isSymmetric(root: TreeNode) -> bool:
    # Допоміжна функція для перевірки симетрії
    def isMirror(t1: TreeNode, t2: TreeNode) -> bool:
        # Якщо обидва вузли None, вони симетричні
        if not t1 and not t2:
            return True
        # Якщо один з вузлів None, а інший ні, вони не симетричні
        if not t1 or not t2:
            return False
        # Перевіряємо значення та дзеркальність нащадків
        return (t1.val == t2.val) and isMirror(t1.left, t2.right) and isMirror(t1.right, t2.left)

    # Викликаємо допоміжну функцію з коренем дерева
    return isMirror(root, root)

# Приклади використання функції
# Приклад 1: root = [1, 2, 2, 3, 4, 4, 3]
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(2)
root1.left.left = TreeNode(3)
root1.left.right = TreeNode(4)
root1.right.left = TreeNode(4)
root1.right.right = TreeNode(3)
print(isSymmetric(root1))  # Виведе: True

# Приклад 2: root = [1, 2, 2, null, 3, null, 3]
root2 = TreeNode(1)
root2.left = TreeNode(2)
root2.right = TreeNode(2)
root2.left.right = TreeNode(3)
root2.right.right = TreeNode(3)
print(isSymmetric(root2))  # Виведе: False

# Приклад 3: root = [1, 2, 1]
root3 = TreeNode(1)
root3.left = TreeNode(2)
root3.right = TreeNode(1)
print(isSymmetric(root3))  # Виведе: False
