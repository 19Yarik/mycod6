# Визначення класу для вузлів дерева
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.max_sum = float('-inf')  # Ініціалізуємо максимальну суму
        
        def max_gain(node):
            if not node:
                return 0
            
            # Обчислюємо максимальну суму для лівого та правого піддерев
            left_gain = max(max_gain(node.left), 0)  # Не беремо негативні значення
            right_gain = max(max_gain(node.right), 0)  # Не беремо негативні значення
            
            # Сума шляху, що проходить через поточний вузол
            price_newpath = node.val + left_gain + right_gain
            
            # Оновлюємо глобальну максимальну суму
            self.max_sum = max(self.max_sum, price_newpath)
            
            # Повертаємо максимальну суму шляху через поточний вузол
            return node.val + max(left_gain, right_gain)

        max_gain(root)  # Викликаємо функцію для кореня
        return self.max_sum

# Функція для побудови дерева з масиву (для тестування)
def buildTree(nodes: list) -> TreeNode:
    if not nodes:
        return None
    
    from collections import deque
    
    root = TreeNode(nodes[0])
    queue = deque([root])
    index = 1
    
    while index < len(nodes):
        current = queue.popleft()
        
        # Лівий нащадок
        if nodes[index] is not None:
            current.left = TreeNode(nodes[index])
            queue.append(current.left)
        index += 1
        
        # Правий нащадок
        if index < len(nodes) and nodes[index] is not None:
            current.right = TreeNode(nodes[index])
            queue.append(current.right)
        index += 1
    
    return root

# Приклади використання функції
solution = Solution()

# Приклад 1: root = [1, 2, 3]
root1 = buildTree([1, 2, 3])
print(solution.maxPathSum(root1))  # Виведе: 6

# Приклад 2: root = [-10, 9, 20, None, None, 15, 7]
root2 = buildTree([-10, 9, 20, None, None, 15, 7])
print(solution.maxPathSum(root2))  # Виведе: 42
