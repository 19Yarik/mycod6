# Визначення класу для вузлів дерева
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def verticalOrder(self, root: TreeNode) -> list:
        from collections import defaultdict, deque

        if not root:
            return []

        column_table = defaultdict(list)
        queue = deque([(root, 0, 0)])  # (вузол, рядок, стовпець)

        while queue:
            node, row, col = queue.popleft()

            if node is not None:
                # Додаємо вузол до таблиці стовпців
                column_table[col].append((row, node.val))

                # Додаємо дочірні вузли в чергу
                queue.append((node.left, row + 1, col - 1))
                queue.append((node.right, row + 1, col + 1))

        # Сортуємо за стовпцями та значеннями
        sorted_columns = sorted(column_table.keys())
        result = []

        for col in sorted_columns:
            # Сортуємо за рядком, а потім за значенням
            column_nodes = sorted(column_table[col])
            result.append([val for row, val in column_nodes])

        return result

# Функція для побудови дерева з масиву (для тестування)
def buildTree(nodes: list) -> TreeNode:
    if not nodes:
        return None
    
    from collections import deque
    
    root = TreeNode(nodes[0])
    queue = deque([root])
    index = 1
    
    while index < len(nodes):
        current = queue.popleft()
        
        # Лівий нащадок
        if nodes[index] is not None:
            current.left = TreeNode(nodes[index])
            queue.append(current.left)
        index += 1
        
        # Правий нащадок
        if index < len(nodes) and nodes[index] is not None:
            current.right = TreeNode(nodes[index])
            queue.append(current.right)
        index += 1
    
    return root

# Приклади використання функції
solution = Solution()

# Приклад 1: root = [3,9,20,null,null,15,7]
root1 = buildTree([3, 9, 20, None, None, 15, 7])
print(solution.verticalOrder(root1))  # Виведе: [[9], [3, 15], [20], [7]]

# Приклад 2: root = [1,2,3,4,5,6,7]
root2 = buildTree([1, 2, 3, 4, 5, 6, 7])
print(solution.verticalOrder(root2))  # Виведе: [[4], [2], [1, 5, 6], [3], [7]]

# Приклад 3: root = [1,2,3,4,6,5,7]
root3 = buildTree([1, 2, 3, 4, 6, 5, 7])
print(solution.verticalOrder(root3))  # Виведе: [[4], [2], [1, 5, 6], [3], [7]]
