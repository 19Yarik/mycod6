# Визначення класу для вузлів дерева
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def recoverFromPreorder(self, traversal: str) -> TreeNode:
        stack = []
        i = 0
        n = len(traversal)

        while i < n:
            # Підраховуємо глибину
            depth = 0
            while i < n and traversal[i] == '-':
                depth += 1
                i += 1
            
            # Підраховуємо значення вузла
            value = 0
            while i < n and traversal[i].isdigit():
                value = value * 10 + int(traversal[i])
                i += 1
            
            # Створюємо новий вузол
            node = TreeNode(value)

            # Якщо глибина дорівнює 0, то це корінь дерева
            if depth == 0:
                stack.append(node)
            else:
                # Встановлюємо зв'язки з батьком
                while len(stack) > depth:
                    stack.pop()
                
                # Призначаємо нового вузла як лівого або правого дочірнього
                parent = stack[-1]
                if not parent.left:
                    parent.left = node
                else:
                    parent.right = node
            
            # Додаємо новий вузол до стеку
            stack.append(node)
        
        return stack[0]  # Корінь дерева

# Функція для побудови дерева з масиву (для тестування)
def buildTree(nodes: list) -> TreeNode:
    if not nodes:
        return None
    
    from collections import deque
    
    root = TreeNode(nodes[0])
    queue = deque([root])
    index = 1
    
    while index < len(nodes):
        current = queue.popleft()
        
        # Лівий нащадок
        if nodes[index] is not None:
            current.left = TreeNode(nodes[index])
            queue.append(current.left)
        index += 1
        
        # Правий нащадок
        if index < len(nodes) and nodes[index] is not None:
            current.right = TreeNode(nodes[index])
            queue.append(current.right)
        index += 1
    
    return root

# Функція для перевірки обходу дерева
def preorderTraversal(root: TreeNode) -> list:
    result = []
    def dfs(node):
        if not node:
            return
        result.append(node.val)
        dfs(node.left)
        dfs(node.right)
    
    dfs(root)
    return result

# Приклади використання функції
solution = Solution()

# Приклад 1: "1-2--3--4-5--6--7"
traversal1 = "1-2--3--4-5--6--7"
tree1 = solution.recoverFromPreorder(traversal1)
print(preorderTraversal(tree1))  # Виведе: [1, 2, 3, 4, 5, 6, 7]

# Приклад 2: "1-2--3---4-5--6---7"
traversal2 = "1-2--3---4-5--6---7"
tree2 = solution.recoverFromPreorder(traversal2)
print(preorderTraversal(tree2))  # Виведе: [1, 2, 3, 4, 5, 6, 7]

# Приклад 3: "1-401--349---90--88"
traversal3 = "1-401--349---90--88"
tree3 = solution.recoverFromPreorder(traversal3)
print(preorderTraversal(tree3))  # Виведе: [1, 401, 349, 90, 88]
